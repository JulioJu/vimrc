if [[ -n "${NVIM+x}" ]]
then

    # https://github.com/neovim/neovim/issues/9960#issuecomment-488262473
    unset VIMRUNTIME

    if command nvr 2> /dev/null
    then
        export EDITOR='nvr --remote-wait-silent'
    else
        export EDITOR='nvim --clean'
    fi
else
    export EDITOR='vim -u NONE'
fi
alias vim="vim -u NONE"

#zplug {{{1
#**************************
if [[ -f "/usr/share/zsh/scripts/zplug/init.zsh" ]]
then
    source /usr/share/zsh/scripts/zplug/init.zsh
elif [[ -f "$HOME/.zplug/init.zsh" ]]
then
    source "$HOME/.zplug/init.zsh"
fi

# Supports oh-my-zsh plugins and the like
zplug "lib/history",   from:oh-my-zsh
zplug "lib/directories",   from:oh-my-zsh
zplug "lib/compfix",   from:oh-my-zsh # handle completions insecurities
zplug "lib/completion",   from:oh-my-zsh # completion settings
zplug "lib/grep",   from:oh-my-zsh
# zplug "lib/spectrum",   from:oh-my-zsh # A script to make using 256 colors in zsh less painful.
zplug "lib/functions", from:oh-my-zsh
zplug "lib/termsupport", from:oh-my-zsh # Set terminal window and tab/icon title
zplug "lib/theme-and-appearance", from:oh-my-zsh # useful to have `ls` with color

zplug "trapd00r/LS_COLORS", use:''

# Set the priority when loading
# e.g., zsh-syntax-highlighting must be loaded
# after executing compinit command and sourcing other plugins
# (If the defer tag is given 2 or above, run after compinit command)
zplug "zsh-users/zsh-syntax-highlighting", defer:2
typeset -A ZSH_HIGHLIGHT_PATTERNS
ZSH_HIGHLIGHT_HIGHLIGHTERS=(pattern)
ZSH_HIGHLIGHT_PATTERNS+=('Â ' 'fg=white,bold,bg=red')
ZSH_HIGHLIGHT_PATTERNS+=('rm -rf *' 'fg=white,bold,bg=red')

# Can manage local plugins
# Load theme file
zplug "~/.vim/dotFilesOtherSoftwareVimCompliant/zsh-themes/", from:local, use:"tjkirch_Ju.zsh-theme", as:theme, from:local

# Then, source plugins and add commands to $PATH
zplug load

# Vi mode {{{1
# ************************************
# Voir notamment http://zsh.sourceforge.net/Doc/Release/Zsh-Line-Editor.html

bindkey -v # Use vi key bindings.
bindkey -M vicmd v edit-command-line # ESC-v to edit in an external editor.

#
stty erase '^h'
bindkey '\e[3~' delete-char


#http://zshwiki.org/home/zle/vi-mode A common request with vi key bindings is to have the mode displayed somewhere such as the prompt. The following makes use of the RPROMPT for this:
precmd() {
  RPROMPT=""
}
zle-keymap-select() {
  RPROMPT=""
  [[ $KEYMAP = vicmd ]] && RPROMPT="(CMD)"
  () { return $__prompt_status }
  zle reset-prompt
}
zle-line-init() {
  typeset -g __prompt_status="$?"
}
zle -N zle-keymap-select
zle -N zle-line-init

#http://zshwiki.org/home/zle/vi-mode
bindkey -a u undo
bindkey -a '^R' redo
bindkey '^?' backward-delete-char
bindkey '^H' backward-delete-char
bindkey '^G' what-cursor-position

# Enable function edit-command-line when we don't use oh-my-zsh {{{1
zle -N edit-command-line
autoload -z edit-command-line

# Completion shift-tabl with vi mapping {{{1


# http://unix.stackexchange.com/questions/84867/zsh-completion-enabling-shift-tab
zmodload zsh/complist
bindkey -M menuselect '^[[Z' reverse-menu-complete


# File manager key binds {{{1
# https://wiki.archlinux.org/index.php/Zsh#Key_Binding
cdUndoKey() {
  popd      > /dev/null
  zle       reset-prompt
  echo
  ls
  echo
}

cdParentKey() {
  pushd .. > /dev/null
  zle      reset-prompt
  echo
  ls
  echo
}

zle -N                 cdParentKey
zle -N                 cdUndoKey
bindkey '^[[5;3~'        cdParentKey # alt + pageUp on laptop Samsung NC10 Terminator software
bindkey '^[[6;3~'        cdUndoKey # alt + pageDown on laptop Samsung NC10 with Terminator software


# less {{{1
# http://superuser.com/questions/117841/get-colors-in-less-command
 # HOW TO INSTALL: see at http://pygments.org/docs/styles/#
export LESS='-R -M'
export LESSOPEN='|~/.lessfilter %s'
# alias less="less -M"

# cat {{{1
alias cat="/bin/ccat"
alias ccat="/bin/cat"


# cmatrix {{{1
cmatrix -bs

# FZF {{{1

source <(fzf --zsh)

bindkey -M vicmd '^[[A' fzf-history-widget
bindkey -M viins '^[[A' fzf-history-widget

# https://github.com/junegunn/fzf
# Setting fd as the default source for fzf
export FZF_DEFAULT_COMMAND='fd --type f --strip-cwd-prefix'

# To apply the command to CTRL-T as well
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"

# Options to fzf command
export FZF_COMPLETION_OPTS='--border --info=inline'

# Use fd (https://github.com/sharkdp/fd) instead of the default find
# command for listing path candidates.
# - The first argument to the function ($1) is the base path to start traversal
# - See the source code (completion.{bash,zsh}) for the details.
_fzf_compgen_path() {
  fd --hidden --follow --exclude ".git" . "$1"
}

# Use fd to generate the list for directory completion
_fzf_compgen_dir() {
  fd --type d --hidden --follow --exclude ".git" . "$1"
}


# Man page {{{1
export MANPAGER='nvim +Man!'
export MANWIDTH=999


# xstat {{{1
# http://moiseevigor.github.io/software/2015/01/30/get-file-creation-time-on-linux-with-ext4/
xstat() {
  for target in "${@}"; do
    inode=$(ls -di "${target}" | cut -d ' ' -f 1)
    fs=$(df "${target}"  | tail -1 | awk '{print $1}')
    crtime=$(sudo debugfs -R 'stat <'"${inode}"'>' "${fs}" 2>/dev/null |
    grep -oP 'crtime.*--\s*\K.*')
    printf "%s\t%s\n" "${crtime}" "${target}"
  done
}


# Alias {{{1
alias nvrm="nvr --remote-tab jejioejijie --remote-send ':MagitOnly<CR>:bw jejioejijie<CR>'"
alias nvrt="nvr --remote-tab"
alias rgg="rg --follow --hidden --files -g"
alias ncd='nvr -c ":cd $(pwd)"'

# Fix backspace problem with vim{{{ 1
# https://vim.fandom.com/wiki/Backspace_and_delete_problems
# Just for vim, not neovim
stty erase '^?'
